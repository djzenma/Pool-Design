clc;
clear;
close all;

format long;

pts = csvread('data/pool1.csv',1,0);
fprintf('%s\nSuccessfuly Read %d points, each of size %d\n%s\n', repelem('-', 50), size(pts), repelem('-', 50));
X = unique(pts(:, 1), 'sorted');
Y = unique(pts(:, 2), 'sorted');
Z = zeros(length(X), length(Y));

for i=1:length(Y)
    y_idx = find(pts(:, 2) == Y(i));
    fprintf("y: %d idx: \n", Y(i)); 
    disp(y_idx);
    
    for j = 1:length(y_idx)
        row_cur = pts(y_idx)(j);   % get every matched row
        x_idx = find(X == row_cur(:,1));    % Get index of the matched x 
        Z(find(Y == row_cur(:,2)),x_idx) = find(pts);
    
        for j=1:length(X)
        x_idx = find(pts(y_idx,1) == X(j));
        %disp(x_idx)
        Z(i, j) = pts(y_idx, x_idx);
    end
end

%x = [1 0.5 0];
%y = [1 0.5 0];
%z = [0 1 2
%     3 4 5
%     6 7 8];


is_pts = input('Points (0) or Function (1) ? [0] : ');
if isempty(is_pts) || ~is_pts
    % Integrate Points
    % Cube Test
    x = [2 0 1.5 0.5 1];        % Notice I took the corners: (0, 0), (0,2), (2,0), (2,2)
    y = [0 2 1 0.5 1.5];
    z = [2 2 2 2 2              % x = Col, y = Row, z = f(Row, Col)
         2 2 2 2 2
         2 2 2 2 2
         2 2 2 2 2
         2 2 2 2 2];
    fprintf("Numerical Points Integration: \n I ~ %10.10f\n", int_pts(x,y,z));
else
    % Integrate Function
    syms x y;
    x_lim = input('Enter x upper limit: ');
    y_lim = input('Enter y upper limit: ');
    f = input('Enter the function: ');
    fprintf("Numerical Function Integration: \n I ~ %10.10f\n", int_fun(f, x_lim, y_lim));
end
